<div class="r-modal" style="top: @(_y)px; left: @(_x)px;">
    <div class="titlebar" @onmousedown="MouseDown" @onmouseup="MouseUp" @onmousemove="MouseMove" @onmouseleave="MouseMove">
        <b class="title" @ref="_titleRef">@Title</b>
        <button class="btnclose" @onclick="OnCloseClicked">X</button>
        <button class="btncollapse" @onclick="@(() => Collapsed = !Collapsed)">_</button>
    </div>
    <div class="r-modal-content" style="@((Collapsed ? "height: 0px;" : "") + $"min-width: {MinWidth}px;")">
        @ChildContent
    </div>
</div>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; } = "Untitled window";

    [Parameter]
    public double X { get; set; } = 60;

    [Parameter]
    public double Y { get; set; } = 60;

    [Parameter]
    public double MinWidth { get; set; } = 100;

    [Parameter]
    public required Action OnCloseClicked { get; set; }

    [Parameter]
    public bool Collapsed { get; set; }

    private ElementReference _titleRef;

    private double _x = 60;
    private double _y = 60;

    protected override async Task OnInitializedAsync() {
        _x = X;
        _y = Y;
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) => await base.OnAfterRenderAsync(firstRender);

    // private void WindowDrag(DragEventArgs obj) {
    //     Console.WriteLine("Drag: " + obj.ToJson());
    //
    //     _x += obj.MovementX;
    //     _y += obj.MovementY;
    //
    //     StateHasChanged();
    // }

    private bool _isDragging;
    private double _dragX;
    private double _dragY;

    private void MouseDown(MouseEventArgs obj) {
        _isDragging = true;
        _dragX = obj.ClientX;
        _dragY = obj.ClientY;
    }

    private void MouseUp(MouseEventArgs obj) => _isDragging = false;

    private void MouseMove(MouseEventArgs obj) {
        if (!_isDragging) return;

        _x += obj.ClientX - _dragX;
        _y += obj.ClientY - _dragY;
        _dragX = obj.ClientX;
        _dragY = obj.ClientY;
        StateHasChanged();
    }

}