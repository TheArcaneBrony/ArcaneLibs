<div class="r-modal" role="dialog" style="top: @(_y)px; left: @(_x)px;" draggable="@_isDraggable.ToString()" @ondragstart="@OnDragStart" @ondragend="OnDragEnd">
    <div class="titlebar">
        <b class="title">@Title</b>
        <button class="btnclose" @onclick="@InvokeOnClose">X</button>
        <button class="btncollapse" @onclick="@(() => Collapsed = !Collapsed)">_</button>
    </div>
    <div class="r-modal-content" style="@((Collapsed ? "height: 0px;" : "") + $"min-width: {MinWidth}px;")"
         draggable="@_isDraggable.ToString()" ondragstart="event.preventDefault(); event.stopPropagation();"
         @onmouseenter="@OnChildEnter" @onmouseleave="@OnChildLeave">
        @ChildContent
    </div>
</div>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string Title { get; set; } = "Untitled window";

    [Parameter]
    public double X { get; set; } = 60;

    [Parameter]
    public double Y { get; set; } = 60;

    [Parameter]
    public double MinWidth { get; set; } = 100;

    [Parameter]
    public Action? OnCloseClicked { get; set; }

    [Parameter]
    public Func<Task>? OnCloseClickedAsync { get; set; }

    private async Task InvokeOnClose() {
        if (OnCloseClicked is not null)
            OnCloseClicked.Invoke();

        if (OnCloseClickedAsync is not null)
            await OnCloseClickedAsync.Invoke();
    }

    [Parameter]
    public bool Collapsed { get; set; }

    private double _x = 60;
    private double _y = 60;

    protected override async Task OnInitializedAsync() {
        _x = X;
        _y = Y;
        await base.OnInitializedAsync();
    }

    private bool _isDragging;
    private bool _isDraggable = true;
    private double _dragX;
    private double _dragY;

    private void OnDragStart(MouseEventArgs obj) {
        _isDragging = true;
        _dragX = obj.ClientX - _x;
        _dragY = obj.ClientY - _y;
        Task.Run(async () => {
            await Task.Yield();
            _x = _y = short.MaxValue;
            StateHasChanged();
        });
    }

    private void OnDragEnd(MouseEventArgs obj) {
        _x = Math.Max(0, obj.ClientX - _dragX);
        _y = Math.Max(0, obj.ClientY - _dragY);
        StateHasChanged();
        _isDragging = false;
    }

    private void OnChildEnter() {
        if (!_isDragging) _isDraggable = false;
        StateHasChanged();
    }

    private void OnChildLeave() {
        _isDraggable = true;
        StateHasChanged();
    }

}