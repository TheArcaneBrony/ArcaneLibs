@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@inject ILogger<AuthorizedImage> Logger
<img src="@FinalBlob" @ref="_self" @attributes="@(OtherAttributes!)"/> @*  *@

@* ReSharper disable once InconsistentNaming *@

@code {
    private static IJSObjectReference? _streamExtensionsModule;
    private static readonly Lock ImportSemaphore = new();
    private static LogLevel _logLevel = LogLevel.Information;
    private static readonly SemaphoreSlim ExecuteSemaphore = new(4, 4);

    public string? FinalBlob { private get; [JSInvokable] set; }
    private CancellationTokenSource _cts = new();

    [Parameter]
    public required string src {
        get;
        set {
            if (field == value) return;
            field = value;
            FinalBlob = null;
        }
    }

    [Parameter]
    public required string AccessToken { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> OtherAttributes { get; set; } = [];

    private ElementReference _self;

    protected override bool ShouldRender() => !string.IsNullOrWhiteSpace(src) && !string.IsNullOrWhiteSpace(AccessToken);

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        // if (!firstRender) return;
        if (!string.IsNullOrWhiteSpace(FinalBlob)) return;
        if (string.IsNullOrWhiteSpace(src) || string.IsNullOrWhiteSpace(AccessToken)) return;
        if (string.IsNullOrWhiteSpace(_self.Id)) return;
        
        
        ImportSemaphore.Enter();
        if (_streamExtensionsModule is null) {
            Logger.LogInformation("Importing AuthorizedImage JS module");
            _streamExtensionsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/ArcaneLibs.Blazor.Components/AuthorizedImage.razor.js");
            Logger.LogInformation("Successfully imported AuthorizedImage JS module");
        }
        _logLevel = GetLogLevel(Logger);
        ImportSemaphore.Exit();

        await ExecuteSemaphore.WaitAsync();
        FinalBlob = await _streamExtensionsModule.InvokeAsync<string?>("streamImageFromUrl", src, AccessToken, _self, GetLogLevel(Logger));
        if (FinalBlob is null) {
            FinalBlob = null;
            src += "#";
        }
            
        StateHasChanged();
        await Task.Yield();
        ExecuteSemaphore.Release();
    }
    
    private static LogLevel GetLogLevel(ILogger logger) {
        if (logger.IsEnabled(LogLevel.Trace)) return LogLevel.Trace;
        if (logger.IsEnabled(LogLevel.Debug)) return LogLevel.Debug;
        if (logger.IsEnabled(LogLevel.Information)) return LogLevel.Information;
        if (logger.IsEnabled(LogLevel.Warning)) return LogLevel.Warning;
        if (logger.IsEnabled(LogLevel.Error)) return LogLevel.Error;
        if (logger.IsEnabled(LogLevel.Critical)) return LogLevel.Critical;
        return LogLevel.None;
    }

}