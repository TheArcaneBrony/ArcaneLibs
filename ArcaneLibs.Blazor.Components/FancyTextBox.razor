@{
    string valueToDisplay = string.IsNullOrWhiteSpace(FormattedValue)
        ? PlaceholderText ?? "Click to edit"
        : FormattedValue;
    bool isPlaceholder = string.IsNullOrWhiteSpace(FormattedValue) && !string.IsNullOrWhiteSpace(PlaceholderText);
}
@if (IsEditing) {
    @if (Multiline) {
        <textarea autofocus @bind="Value" @onfocusout="@OnFocusOut" @ref="_elementToFocus"></textarea>
    }
    else {
        <input autofocus @bind="Value" @onfocusout="@OnFocusOut" @ref="_elementToFocus" type="@(IsPassword ? "password" : "text")"/>
    }
}
else {
    @if (Multiline && !string.IsNullOrWhiteSpace(Value)) {
        <span role="textbox" class="fancy-textbox-inline-multiline" tabindex="0"
              style="@(string.IsNullOrEmpty(Value) ? "min-width: 50px;" : "") background-color: @BackgroundColor; color: @ForegroundColor"
              @onfocusin="@OnFocusIn"><pre>@FormattedValue</pre></span>
    }
    else {
        <span role="textbox" class="fancy-textbox-inline" tabindex="0"
              style="@(string.IsNullOrEmpty(Value) ? "min-width: 50px;" : "") background-color: @BackgroundColor; color: @ForegroundColor"
              @onfocusin="@OnFocusIn">@FormattedValue</span>
    }
}

@code {

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public bool IsPassword { get; set; }

    [Parameter]
    public bool Multiline { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Func<string?, string?>? Formatter { get; set; }

    [Parameter]
    public string ForegroundColor { get; set; } = "#ffffffff";

    [Parameter]
    public string BackgroundColor { get; set; } = "#00000000";

    [Parameter]
    public string? PlaceholderText { get; set; }

    private string? FormattedValue => Formatter?.Invoke(Value) ?? (IsPassword && Value is not null ? string.Join("", Value.Select(_ => '*')) : Value);

    private ElementReference? _elementToFocus;

    private bool IsEditing { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!IsEditing) return;
        if (_elementToFocus is null) return;
        await _elementToFocus.Value.FocusAsync();
    }

    private string? _oldValue;

    private void OnFocusOut() {
        IsEditing = false;
        if (Value != _oldValue)
            ValueChanged.InvokeAsync(Value);
    }

    private void OnFocusIn() {
        IsEditing = true;
        _oldValue = Value;
    }

}