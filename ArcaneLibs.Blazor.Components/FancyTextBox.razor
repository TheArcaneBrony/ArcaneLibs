@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime
@rendermode RenderMode.InteractiveWebAssembly
@if (_isVisible) {
    @if(Multiline) {
        <textarea autofocus @bind="Value" @onfocusout="() => { _isVisible = false; ValueChanged.InvokeAsync(Value); }" @ref="_elementToFocus"></textarea>
    }
    else {
        <input autofocus type="@(IsPassword ? "password" : "text")" @bind="Value" @onfocusout="() => { _isVisible = false; ValueChanged.InvokeAsync(Value); }" @ref="_elementToFocus"/>
    }
    @* <input autofocus type="@(IsPassword ? "password" : "text")" @bind="Value" @onfocusout="() => { _isVisible = false; ValueChanged.InvokeAsync(Value); }" @ref="_elementToFocus"/> *@
}
else {
    @*  *@
    @if (Multiline && !string.IsNullOrWhiteSpace(Value)) {
        <span role="textbox" class="fancy-textbox-inline-multiline" tabindex="0" style="@(string.IsNullOrEmpty(Value) ? "min-width: 50px;" : "") background-color: @BackgroundColor; color: @ForegroundColor" @onfocusin="() => _isVisible = true"><pre>@(Formatter?.Invoke(Value) ?? (IsPassword && Value is not null ? string.Join("", Value.Select(_ => '*')) : Value))</pre></span>
    }
    else {
        <span role="textbox" class="fancy-textbox-inline" tabindex="0" style="@(string.IsNullOrEmpty(Value) ? "min-width: 50px;" : "") background-color: @BackgroundColor; color: @ForegroundColor" @onfocusin="() => _isVisible = true">@(Formatter?.Invoke(Value) ?? (IsPassword && Value is not null ? string.Join("", Value.Select(_ => '*')) : Value))</span>
    }
}

@code {

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public bool IsPassword { get; set; }

    [Parameter]
    public bool Multiline { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public Func<string?, string>? Formatter { get; set; }

    private bool _isVisible = false;

    private ElementReference? _elementToFocus;
    private static IJSObjectReference? _module;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!firstRender) return;
        _module ??= await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/ArcaneLibs.Blazor.Components/FancyTextBox.js");
        await _module.InvokeVoidAsync("BlazorFocusElement", _elementToFocus);
    }

    [Parameter]
    public string ForegroundColor { get; set; } = "#ffffffff";

    [Parameter]
    public string BackgroundColor { get; set; } = "#00000000";


}